plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.github.triplet.play"
    id "maven-publish"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// for local signing
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "ch.sbb.maps.flutter"
    compileSdk 36
    ndkVersion "28.1.13356709" // required by geolocator_android & maplibre_gl

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_21.toString()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "ch.sbb.maps.flutter.example"
        minSdk 28
        targetSdk flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            storeFile file(System.getenv('SIGNING_KEYSTORE_FILE') ?: file("keys/sbb_maps_flutter_example_keystore.jks"))
            storePassword System.getenv('SIGNING_KEYSTORE_PASSWORD') ?: keystoreProperties['storePassword']
            keyAlias System.getenv('SIGNING_KEY_ALIAS') ?: keystoreProperties['keyAlias']
            keyPassword System.getenv('SIGNING_KEY_PASSWORD') ?: keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug
        release {
            signingConfig signingConfigs.release
        }
    }
    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

play {
    serviceAccountCredentials.set(file("keys/google_playstore_service_account.json"))
    track.set('alpha')
    defaultToAppBundles.set(true)
    artifactDir.set(file("../../build/app/outputs/bundle/release"))
}

publishing.publications {
    android.applicationVariants.all { variant ->
        String flavorName = variant.flavorName
        variant.outputs.each { output ->
            def publicationName = output.outputFile.name.minus('.apk')
            "${publicationName}"(MavenPublication) {

                def path = "${project.buildDir.absolutePath}/outputs/bundle/release/${publicationName}.aab"
                artifact new File(path)
                groupId 'ch.sbb.rokas.flutter'
                artifactId 'ch.sbb.maps.flutter.example'
                version "${flutterVersionName}"
            }
        }
    }
}

publishing.repositories {
    maven {
        name = 'temp'
        url = "${rootProject.buildDir}"
    }
}

flutter {
    source '../..'
}

dependencies {}

afterEvaluate {
    bundleRelease.finalizedBy(assembleRelease)
    assembleRelease.finalizedBy('publishApp-releasePublicationToTempRepository')
}
